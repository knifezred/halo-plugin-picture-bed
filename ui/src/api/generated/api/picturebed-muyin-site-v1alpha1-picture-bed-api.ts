/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from '../configuration';
import type {AxiosInstance, AxiosPromise, RawAxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, type RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
import type {AlbumVO, ImageVO, PageResult, PictureBedVO, ResultsVO} from '../models';

/**
 * PicturebedMuyinSiteV1alpha1PictureBedApi - axios parameter creator
 * @export
 */
export const PicturebedMuyinSiteV1alpha1PictureBedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * albums
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [pictureBedId] pictureBedId
         * @param {string} [type] type
         * @param {string} [albumId] albumId
         * @param {string} [imageId] imageId
         * @param {string} [keyword] keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albums: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, pictureBedId?: string, type?: string, albumId?: string, imageId?: string, keyword?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/picturebed.muyin.site/v1alpha1/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pictureBedId !== undefined) {
                localVarQueryParameter['pictureBedId'] = pictureBedId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (albumId !== undefined) {
                localVarQueryParameter['albumId'] = albumId;
            }

            if (imageId !== undefined) {
                localVarQueryParameter['imageId'] = imageId;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * deleteImage
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [pictureBedId] pictureBedId
         * @param {string} [type] type
         * @param {string} [albumId] albumId
         * @param {string} [imageId] imageId
         * @param {string} [keyword] keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImage: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, pictureBedId?: string, type?: string, albumId?: string, imageId?: string, keyword?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/picturebed.muyin.site/v1alpha1/deleteImage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pictureBedId !== undefined) {
                localVarQueryParameter['pictureBedId'] = pictureBedId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (albumId !== undefined) {
                localVarQueryParameter['albumId'] = albumId;
            }

            if (imageId !== undefined) {
                localVarQueryParameter['imageId'] = imageId;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * images
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [pictureBedId] pictureBedId
         * @param {string} [type] type
         * @param {string} [albumId] albumId
         * @param {string} [imageId] imageId
         * @param {string} [keyword] keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        images: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, pictureBedId?: string, type?: string, albumId?: string, imageId?: string, keyword?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/picturebed.muyin.site/v1alpha1/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pictureBedId !== undefined) {
                localVarQueryParameter['pictureBedId'] = pictureBedId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (albumId !== undefined) {
                localVarQueryParameter['albumId'] = albumId;
            }

            if (imageId !== undefined) {
                localVarQueryParameter['imageId'] = imageId;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * pictureBeds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pictureBeds: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/picturebed.muyin.site/v1alpha1/pictureBeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * uploadImage
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [pictureBedId] pictureBedId
         * @param {string} [type] type
         * @param {string} [albumId] albumId
         * @param {string} [imageId] imageId
         * @param {string} [keyword] keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, pictureBedId?: string, type?: string, albumId?: string, imageId?: string, keyword?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/picturebed.muyin.site/v1alpha1/uploadImage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pictureBedId !== undefined) {
                localVarQueryParameter['pictureBedId'] = pictureBedId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (albumId !== undefined) {
                localVarQueryParameter['albumId'] = albumId;
            }

            if (imageId !== undefined) {
                localVarQueryParameter['imageId'] = imageId;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PicturebedMuyinSiteV1alpha1PictureBedApi - functional programming interface
 * @export
 */
export const PicturebedMuyinSiteV1alpha1PictureBedApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = PicturebedMuyinSiteV1alpha1PictureBedApiAxiosParamCreator(configuration)
    return {
        /**
         * albums
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [pictureBedId] pictureBedId
         * @param {string} [type] type
         * @param {string} [albumId] albumId
         * @param {string} [imageId] imageId
         * @param {string} [keyword] keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async albums(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, pictureBedId?: string, type?: string, albumId?: string, imageId?: string, keyword?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlbumVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.albums(page, size, labelSelector, fieldSelector, sort, pictureBedId, type, albumId, imageId, keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PicturebedMuyinSiteV1alpha1PictureBedApi.albums']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * deleteImage
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [pictureBedId] pictureBedId
         * @param {string} [type] type
         * @param {string} [albumId] albumId
         * @param {string} [imageId] imageId
         * @param {string} [keyword] keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImage(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, pictureBedId?: string, type?: string, albumId?: string, imageId?: string, keyword?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(page, size, labelSelector, fieldSelector, sort, pictureBedId, type, albumId, imageId, keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PicturebedMuyinSiteV1alpha1PictureBedApi.deleteImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * images
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [pictureBedId] pictureBedId
         * @param {string} [type] type
         * @param {string} [albumId] albumId
         * @param {string} [imageId] imageId
         * @param {string} [keyword] keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async images(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, pictureBedId?: string, type?: string, albumId?: string, imageId?: string, keyword?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.images(page, size, labelSelector, fieldSelector, sort, pictureBedId, type, albumId, imageId, keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PicturebedMuyinSiteV1alpha1PictureBedApi.images']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * pictureBeds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pictureBeds(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PictureBedVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pictureBeds(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PicturebedMuyinSiteV1alpha1PictureBedApi.pictureBeds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * uploadImage
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [pictureBedId] pictureBedId
         * @param {string} [type] type
         * @param {string} [albumId] albumId
         * @param {string} [imageId] imageId
         * @param {string} [keyword] keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadImage(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, pictureBedId?: string, type?: string, albumId?: string, imageId?: string, keyword?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultsVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImage(page, size, labelSelector, fieldSelector, sort, pictureBedId, type, albumId, imageId, keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PicturebedMuyinSiteV1alpha1PictureBedApi.uploadImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PicturebedMuyinSiteV1alpha1PictureBedApi - factory interface
 * @export
 */
export const PicturebedMuyinSiteV1alpha1PictureBedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PicturebedMuyinSiteV1alpha1PictureBedApiFp(configuration)
    return {
        /**
         * albums
         * @param {PicturebedMuyinSiteV1alpha1PictureBedApiAlbumsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albums(requestParameters: PicturebedMuyinSiteV1alpha1PictureBedApiAlbumsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<AlbumVO>> {
            return localVarFp.albums(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.pictureBedId, requestParameters.type, requestParameters.albumId, requestParameters.imageId, requestParameters.keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * deleteImage
         * @param {PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImage(requestParameters: PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImageRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.deleteImage(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.pictureBedId, requestParameters.type, requestParameters.albumId, requestParameters.imageId, requestParameters.keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * images
         * @param {PicturebedMuyinSiteV1alpha1PictureBedApiImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        images(requestParameters: PicturebedMuyinSiteV1alpha1PictureBedApiImagesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageResult> {
            return localVarFp.images(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.pictureBedId, requestParameters.type, requestParameters.albumId, requestParameters.imageId, requestParameters.keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * pictureBeds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pictureBeds(options?: RawAxiosRequestConfig): AxiosPromise<Array<PictureBedVO>> {
            return localVarFp.pictureBeds(options).then((request) => request(axios, basePath));
        },
        /**
         * uploadImage
         * @param {PicturebedMuyinSiteV1alpha1PictureBedApiUploadImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage(requestParameters: PicturebedMuyinSiteV1alpha1PictureBedApiUploadImageRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ResultsVO> {
            return localVarFp.uploadImage(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.pictureBedId, requestParameters.type, requestParameters.albumId, requestParameters.imageId, requestParameters.keyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for albums operation in PicturebedMuyinSiteV1alpha1PictureBedApi.
 * @export
 * @interface PicturebedMuyinSiteV1alpha1PictureBedApiAlbumsRequest
 */
export interface PicturebedMuyinSiteV1alpha1PictureBedApiAlbumsRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly sort?: Array<string>

    /**
     * pictureBedId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly pictureBedId?: string

    /**
     * type
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly type?: string

    /**
     * albumId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly albumId?: string

    /**
     * imageId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly imageId?: string

    /**
     * keyword
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiAlbums
     */
    readonly keyword?: string
}

/**
 * Request parameters for deleteImage operation in PicturebedMuyinSiteV1alpha1PictureBedApi.
 * @export
 * @interface PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImageRequest
 */
export interface PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImageRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly sort?: Array<string>

    /**
     * pictureBedId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly pictureBedId?: string

    /**
     * type
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly type?: string

    /**
     * albumId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly albumId?: string

    /**
     * imageId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly imageId?: string

    /**
     * keyword
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImage
     */
    readonly keyword?: string
}

/**
 * Request parameters for images operation in PicturebedMuyinSiteV1alpha1PictureBedApi.
 * @export
 * @interface PicturebedMuyinSiteV1alpha1PictureBedApiImagesRequest
 */
export interface PicturebedMuyinSiteV1alpha1PictureBedApiImagesRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly sort?: Array<string>

    /**
     * pictureBedId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly pictureBedId?: string

    /**
     * type
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly type?: string

    /**
     * albumId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly albumId?: string

    /**
     * imageId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly imageId?: string

    /**
     * keyword
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiImages
     */
    readonly keyword?: string
}

/**
 * Request parameters for uploadImage operation in PicturebedMuyinSiteV1alpha1PictureBedApi.
 * @export
 * @interface PicturebedMuyinSiteV1alpha1PictureBedApiUploadImageRequest
 */
export interface PicturebedMuyinSiteV1alpha1PictureBedApiUploadImageRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly sort?: Array<string>

    /**
     * pictureBedId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly pictureBedId?: string

    /**
     * type
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly type?: string

    /**
     * albumId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly albumId?: string

    /**
     * imageId
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly imageId?: string

    /**
     * keyword
     * @type {string}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApiUploadImage
     */
    readonly keyword?: string
}

/**
 * PicturebedMuyinSiteV1alpha1PictureBedApi - object-oriented interface
 * @export
 * @class PicturebedMuyinSiteV1alpha1PictureBedApi
 * @extends {BaseAPI}
 */
export class PicturebedMuyinSiteV1alpha1PictureBedApi extends BaseAPI {
    /**
     * albums
     * @param {PicturebedMuyinSiteV1alpha1PictureBedApiAlbumsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApi
     */
    public albums(requestParameters: PicturebedMuyinSiteV1alpha1PictureBedApiAlbumsRequest = {}, options?: RawAxiosRequestConfig) {
        return PicturebedMuyinSiteV1alpha1PictureBedApiFp(this.configuration).albums(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.pictureBedId, requestParameters.type, requestParameters.albumId, requestParameters.imageId, requestParameters.keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * deleteImage
     * @param {PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApi
     */
    public deleteImage(requestParameters: PicturebedMuyinSiteV1alpha1PictureBedApiDeleteImageRequest = {}, options?: RawAxiosRequestConfig) {
        return PicturebedMuyinSiteV1alpha1PictureBedApiFp(this.configuration).deleteImage(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.pictureBedId, requestParameters.type, requestParameters.albumId, requestParameters.imageId, requestParameters.keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * images
     * @param {PicturebedMuyinSiteV1alpha1PictureBedApiImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApi
     */
    public images(requestParameters: PicturebedMuyinSiteV1alpha1PictureBedApiImagesRequest = {}, options?: RawAxiosRequestConfig) {
        return PicturebedMuyinSiteV1alpha1PictureBedApiFp(this.configuration).images(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.pictureBedId, requestParameters.type, requestParameters.albumId, requestParameters.imageId, requestParameters.keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * pictureBeds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApi
     */
    public pictureBeds(options?: RawAxiosRequestConfig) {
        return PicturebedMuyinSiteV1alpha1PictureBedApiFp(this.configuration).pictureBeds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * uploadImage
     * @param {PicturebedMuyinSiteV1alpha1PictureBedApiUploadImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PicturebedMuyinSiteV1alpha1PictureBedApi
     */
    public uploadImage(requestParameters: PicturebedMuyinSiteV1alpha1PictureBedApiUploadImageRequest = {}, options?: RawAxiosRequestConfig) {
        return PicturebedMuyinSiteV1alpha1PictureBedApiFp(this.configuration).uploadImage(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.pictureBedId, requestParameters.type, requestParameters.albumId, requestParameters.imageId, requestParameters.keyword, options).then((request) => request(this.axios, this.basePath));
    }
}

